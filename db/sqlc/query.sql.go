// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO peeple_users (phone_number)
VALUES ($1)
RETURNING id, phone_number
`

func (q *Queries) CreateUser(ctx context.Context, phoneNumber string) (PeepleUser, error) {
	row := q.db.QueryRow(ctx, createUser, phoneNumber)
	var i PeepleUser
	err := row.Scan(&i.ID, &i.PhoneNumber)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, phone_number FROM peeple_users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (PeepleUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i PeepleUser
	err := row.Scan(&i.ID, &i.PhoneNumber)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, phone_number FROM peeple_users 
WHERE phone_number = $1 LIMIT 1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (PeepleUser, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i PeepleUser
	err := row.Scan(&i.ID, &i.PhoneNumber)
	return i, err
}
